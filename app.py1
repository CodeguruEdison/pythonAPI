from uuid import uuid4
from flask  import Flask, jsonify, request
from db import items, stores
from flask_smorest import abort

app = Flask(__name__)

#docker run -dp 5000:5000 -w/app -v "$(pwd):/app" flask-smorest-api
#docker build -t flask-smorest-api .  
#https://rest-apis-flask.teclado.com/docs/docker_intro/in_depth_docker_tutorial/
# source .venv/bin/activate


@app.get("/store")
def get_stores():
    return jsonify({"stores": list(stores.values())})

@app.post("/store")
def create_store():
    store_data = request.get_json()
    if("name" not in store_data):
        abort(400, message="invalid request. Ensure 'name' is provided.")
    for store in stores.values():
         if(store_data["name"] == store["name"]):
            abort(400, message="store already exists.")
  
    store_id = uuid4().hex
    store={**store_data, "id": store_id}
    stores[store_id] = store
    return store, 201

# @app.delete("/store/<string:store_id>")
# def delete_store(store_id):
#     try:
#         del stores[store_id]
#         return({"message":"Store deleted"})
#     except KeyError:
#        abort(404,message ="Store not found") 
   
@app.post("/item")
def create_item():
    item_data = request.get_json()
    if( "price" not in item_data or
        "store_id" not in item_data or 
        "name" not in item_data):
        abort(400, message="invalid request.")
        
    for item in items.values():
     if(item["name"] == item_data["name"]) and item["store_id"] == item_data["store_id"]:
        abort(400, message="item already exists.")
        
    if( item_data["store_id"] not in stores):
         abort(404, message="store not found.")
         
    item_id = uuid4().hex
    item = {**item_data, "id": item_id}
    items[item_id] = item
    return item, 201

@app.get("/items")
def get_items():
    return jsonify({"items": list(items.values())})

@app.delete("/item/<string:item_id>")
def delete_item(item_id):
    try:
        del items[item_id]
        return {"message":"item deleted"}
    except KeyError:
        abort(404,message = "item not found")
            

@app.get("/store/<string:store_id>")
def get_store(store_id:str):
    try:
     return stores[store_id]
    except:
      abort(404, message="store not found.")


@app.get("/item/<string:item_id>")
def get_item(item_id:str):
    try:
     return items[item_id]
    except:
        abort(404, message="item not found.")

@app.put("/item/<string:item_id>")
def update_item(item_id:str):
    
    item_data = request.get_json()
    if("price"  not in item_data or "name" not in item_data):
      abort(400,message = "Bad request, Ensure 'price' and 'name' are included in JSON payload") 
        
    try:
        item = items[item_id]
        item |=item_data 
        return item   
    except KeyError:
        abort(404,message="item not found")
            
   
